#+TITLE: Translators System
#+AUTHOR: VLEAD
#+DATE: [2016-06-07 Tue]
#+SETUPFILE: ../../org-templates/level-2.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* The =System= class
  There is only one =System= in the application. This =System= interacts with
  the Github API and generates the experiment structure on the remote server.

** Constructor
   The system cannot be initialized.

#+NAME: class_system
#+BEGIN_SRC python
class System():

    # use exceptions to raise error
    # "cannot initialise error"
    def __init__(self):
        pass

#+END_SRC

** Methods
   These methods are used to create the experiments and labs. The versioning of
   an experiment is done using the Github API and the configuration parameters
   specified in the [[../config/config.org][=Configuration=]] of the application. The packaged lab
   structure is generated using the structure generator for open edX module and the
   corresponding configuration parameters.

*** get_user
+ Returns the user based on the personal access token from Config.
#+NAME: get_user
#+BEGIN_SRC python
    @staticmethod
    def get_user():
        return Github(Config.USER_KEY)

#+END_SRC

*** get_org
+ Returns the org based on the ORG-ID from Config.
#+NAME: get_org
#+BEGIN_SRC python
    @staticmethod
    def get_org(user):
        return user.get_org_by_id(Config.ORG_ID)

#+END_SRC

*** create_repo
+ Creates repo in the org.
#+NAME: create_repo
#+BEGIN_SRC python
    @staticmethod
    def create_repo(org, name):
        return org.create_repo(name)

#+END_SRC

*** delete_repo
+ Deletes repo in the org.
#+NAME: delete_repo
#+BEGIN_SRC python
    @classmethod
    def delete_repo(cls, org, repo_name):
        repo = cls.get_repo(org, repo_name)
        if repo is not None:
            repo.delete()

#+END_SRC

*** get_repo
+ Returns the repo with specified name in the org.
#+NAME: get_repo
#+BEGIN_SRC python
    @staticmethod
    def get_repo(org, name):
        return org.get_repo(name)

#+END_SRC

*** get_file
+ Returns the files in the given path.
#+NAME: get_file
#+BEGIN_SRC python
    @staticmethod
    def get_file(repo, path):
        return repo.get_contents(path)

#+END_SRC

*** create_file
+ Creates file in the repo with specified name and the path.
#+NAME: create_file
#+BEGIN_SRC python
    @staticmethod
    def create_file(repo, path, content = None):
        if content is None:
            content = "This is the file from " + path
        repo.create_file(path, content, path + " file")

#+END_SRC

*** delete_file
+ Deletes the file with specified path.
#+NAME: delete_file
#+BEGIN_SRC python
    @staticmethod
    def delete_file(repo, path):
        repo.delete_file(path, "delete file from " + path)

#+END_SRC

*** gen_json_file
#+NAME: gen_json_file
#+BEGIN_SRC python
    @staticmethod
    def gen_json_file(json_dump, filename):
        # The file created is temporary ?
        with open(filename, 'w+') as fp:
            json.dump(json_dump, fp)

#+END_SRC

*** gen_lab_dir
#+NAME: gen_lab_dir
#+BEGIN_SRC python
    @staticmethod
    def gen_lab_dir(labname):
        os.mkdir(Config.LABPATH+"/"+labname)

#+END_SRC
    
*** del_lab_dir
#+NAME: del_lab_dir
#+BEGIN_SRC python
    @staticmethod
    def del_lab_dir(labname):
        rmtree(Config.LABPATH+"/"+labname)

#+END_SRC
    
*** pack_lab
#+NAME: pack_lab
#+BEGIN_SRC python
    @staticmethod
    def pack_lab(labname):
        command = "tar -czf "
        command += Config.LABPATH + "/" + labname + ".tar.gz "
        command += Config.LABPATH + "/" + labname
        os.system(command)
    
#+END_SRC

*** execute_python
#+NAME: execute_python
#+BEGIN_SRC python
    @staticmethod
    def execute_python(script, args):
        command = "python " + script
        for a in args:
            command += " " + a
        os.system(command)

#+END_SRC
*** create_skeleton
#+NAME: create_skeleton
#+BEGIN_SRC python
    @staticmethod
    def create_skeleton(experiment_dict):
        content = Config.CREATE_SKELETON(experiment_dict)
        f = open(Config.SKELETON_PATH + '/' + experiment_dict['name'] + '-' + experiment_dict['id'] + '.html', 'w')
        f.write(content)
        f.close()

#+END_SRC

** Imports
   The system requires access to the os library
#+NAME: imports_system
#+BEGIN_SRC python
from runtime.config.config import Config
from githubv3.github import Github
import os, json
from shutil import rmtree

#+END_SRC
   
* Tangle                                                        :boilerplate:
#+BEGIN_SRC python :tangle system.py :eval no :noweb yes
<<imports_system>>
<<class_system>>
<<get_user>>
<<get_org>>
<<create_repo>>
<<delete_repo>>
<<get_repo>>
<<get_file>>
<<create_file>>
<<delete_file>>
<<gen_json_file>>
<<gen_lab_dir>>
<<del_lab_dir>>
<<create_skeleton>>
<<pack_lab>>
<<execute_python>>
#+END_SRC
