#+TITLE: The Flask web server
#+AUTHOR: VLEAD
#+SETUPFILE: ../../org-templates/level-2.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Introduction
  The web server for the translators application

* Flask server
  We will need to initialize the app in =Flask=.
#+NAME: server
#+BEGIN_SRC python
def create_app(config):
    # initialise app
    app = Flask(__name__,
                static_folder="",
                template_folder="")
    app.config.from_object(config)
    # cors = CORS(app, resources={r"/api/*": {"origins": "*"}})
    app.register_blueprint(api)
    
    # configure logging for the app
    configure_logging(app)
    
    return app

#+END_SRC

* Logging
  And also take care of the logs for everything that happens so that we can
  debug later.
#+NAME: configure_logging
#+BEGIN_SRC python
def configure_logging(app):
    import logging
    import logging.handlers
    formatter = logging.Formatter('%(asctime)s: %(levelname)s: %(filename)s:'
                                  ' %(funcName)s():%(lineno)d: %(message)s')

    # Also error can be sent out via email. So we can also have a SMTPHandler?
    log_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)),
                           '../..',
                           LOG_FILE_DIRECTORY)

    if not os.path.exists(log_dir):
        os.makedirs(log_dir)
    log_file = "%s/%s" % (log_dir, LOG_FILE)
    os.system("sudo touch %s" % log_file)
    os.system("sudo chmod 777 %s" % log_file)
    max_size = 1024 * 1024 * 20  # Max Size for a log file: 20MB
    log_handler = logging.handlers.RotatingFileHandler(log_file,
                                                       maxBytes=max_size,
                                                       backupCount=10)
    log_level = LOG_LEVEL
    log_handler.setFormatter(formatter)
    app.logger.addHandler(log_handler)
    app.logger.setLevel(log_level)

#+END_SRC

* imports
These are the Python modules that needs to be imported for the app to run.
#+NAME: imports_server
#+BEGIN_SRC python
import os
from flask import Flask, jsonify, make_response
from flask_cors import CORS, cross_origin

# Need to change the root PYTHONPATH during runtime
from runtime.rest.api import api

# Need to change the root PYTHONPATH during runtime
from runtime.config import app_config as config
from runtime.config.app_config import LOG_FILE_DIRECTORY
from runtime.config.app_config import LOG_FILE
from runtime.config.app_config import LOG_LEVEL

#+END_SRC

* Run server
Finally, the server is run hosting this app on =localhost=.
#+NAME: run_server
#+BEGIN_SRC python
if __name__ == "__main__":
    app = create_app(config)
    # Need to modify host for production and testing
    app.run(debug=True, host='0.0.0.0', threaded=True)

#+END_SRC

* Tangle
#+BEGIN_SRC python :tangle app.py :eval no :noweb yes
<<imports_server>>
<<configure_logging>>
<<server>>
<<run_server>>
#+END_SRC
